docker run -it -p 1880:1880 --name mynodered nodered/node-red-docker
Ctrl-p Ctrl-q to detach from the container. This leaves it running in the background.
docker attach mynodered
docker stop mynodered
docker start mynodered

# Open a shell in the container
docker exec -it mynodered /bin/bash

# Once inside the container, npm install the nodes in /data
cd /data
npm install node-red-node-smooth
exit

# Restart the container to load the new nodes
docker stop mynodered
docker start mynodered


Your flows will be stored in the file called flows.json within the container. This can be customised by setting the FLOWS environment parameter:
docker run -it -p 1880:1880 -e FLOWS=my_flows.json nodered/node-red-docker
Node.js runtime arguments can be passed to the container using an environment parameter (NODE_OPTIONS). For example, to fix the heap size used by the Node.js garbage collector you would use the following command:

docker run -it -p 1880:1880 -e NODE_OPTIONS="--max_old_space_size=128" nodered/node-red-docker
It is possible to mount the /data path on an external volume:

docker run -it -p 1880:1880 -v ~/node-red-data:/data --name mynodered nodered/node-red-docker

Building the container from source
The Dockerfiles for these containers are maintained here, each under its own branch.

To build your own version:

git clone https://github.com/node-red/node-red-docker.git
cd node-red-docker

# Build it with the desired tag
docker build -f <version>/Dockerfile -t mynodered:<tag> .

Building a custom image
Creating a new Docker image, using the public Node-RED images as the base image, allows you to install extra nodes during the build process.

Create a file called Dockerfile with the content:

 FROM nodered/node-red-docker
 RUN npm install node-red-node-wordpos
Run the following command to build the image:

 docker build -t mynodered:<tag> .


 Linking Containers
You can link containers “internally” within the Docker runtime by using the --link option.

For example, if you have a container that provides an MQTT broker container called mybroker, you can run the Node-RED container with the link parameter to join the two:

docker run -it -p 1880:1880 --name mynodered --link mybroker:broker nodered/node-red-docker
This will make broker a known hostname within the Node-RED container that can be used to access the service within a flow, without having to expose it outside of the Docker host.
